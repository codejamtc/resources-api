{
	"info": {
		"_postman_id": "f9009c39-962f-4d40-a266-d3b1633d5c98",
		"name": "resource-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Resource Roles",
			"item": [
				{
					"name": "create resource role",
					"item": [
						{
							"name": "create resource role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.fullReadAccess).to.eq(iterationData.get('fullReadAccess'))",
											"        pm.expect(response.fullWriteAccess).to.eq(iterationData.get('fullWriteAccess'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.selfObtainable).to.eq(iterationData.get('selfObtainable'))",
											"        pm.environment.set(\"COPILOT_RESOURCE_ROLE_ID\", response.id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"fullReadAccess\": {{fullReadAccess}},\n    \"fullWriteAccess\": {{fullWriteAccess}},\n\t\"isActive\": {{isActive}},\n\t\"selfObtainable\": {{selfObtainable}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource role by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.fullReadAccess).to.eq(iterationData.get('fullReadAccess'))",
											"        pm.expect(response.fullWriteAccess).to.eq(iterationData.get('fullWriteAccess'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.selfObtainable).to.eq(iterationData.get('selfObtainable'))",
											"        pm.environment.set(\"COPILOT_RESOURCE_ROLE_ID\", response.id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"fullReadAccess\": {{fullReadAccess}},\n    \"fullWriteAccess\": {{fullWriteAccess}},\n\t\"isActive\": {{isActive}},\n\t\"selfObtainable\": {{selfObtainable}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure-token\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n    \"selfObtainable\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update resource role",
					"item": [
						{
							"name": "update resource role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.fullReadAccess).to.eq(iterationData.get('fullReadAccess'))",
											"        pm.expect(response.fullWriteAccess).to.eq(iterationData.get('fullWriteAccess'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.selfObtainable).to.eq(iterationData.get('selfObtainable'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"fullReadAccess\": {{fullReadAccess}},\n    \"fullWriteAccess\": {{fullWriteAccess}},\n\t\"isActive\": {{isActive}},\n\t\"selfObtainable\": {{selfObtainable}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"{{COPILOT_RESOURCE_ROLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update resource role by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.fullReadAccess).to.eq(iterationData.get('fullReadAccess'))",
											"        pm.expect(response.fullWriteAccess).to.eq(iterationData.get('fullWriteAccess'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.selfObtainable).to.eq(iterationData.get('selfObtainable'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"{{name}}\",\n\t\"fullReadAccess\": {{fullReadAccess}},\n    \"fullWriteAccess\": {{fullWriteAccess}},\n\t\"isActive\": {{isActive}},\n\t\"selfObtainable\": {{selfObtainable}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"{{COPILOT_RESOURCE_ROLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update resource role with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure-test\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"{{COPILOT_RESOURCE_ROLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "failure - update resource role invalid id 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure-test\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"test"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Resource Role Phase Dependencies",
			"item": [
				{
					"name": "create dependency",
					"item": [
						{
							"name": "create dependency by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.phaseId).to.eq(iterationData.get('phaseId'))",
											"        pm.expect(response.resourceRoleId).to.eq(pm.environment.get('COPILOT_RESOURCE_ROLE_ID'))",
											"        pm.expect(response.phaseState).to.eq(iterationData.get('phaseState'))",
											"        pm.environment.set(\"DEPENDENCY_ID_1\", pm.response.json().id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{phaseId}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": {{phaseState}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dependency by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.phaseId).to.eq(iterationData.get('phaseId'))",
											"        pm.expect(response.resourceRoleId).to.eq(pm.environment.get('COPILOT_RESOURCE_ROLE_ID'))",
											"        pm.expect(response.phaseState).to.eq(iterationData.get('phaseState'))",
											"        pm.environment.set(\"DEPENDENCY_ID_2\", pm.response.json().id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{phaseId}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": {{phaseState}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dependency with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dependency with not found phase id 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get dependencies",
					"item": [
						{
							"name": "get all dependencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									]
								}
							},
							"response": []
						},
						{
							"name": "get matched dependencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies?phaseId={{PHASE_ID}}&resourceRoleId={{SUBMITTER_RESOURCE_ROLE_ID}}&phaseState=false",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									],
									"query": [
										{
											"key": "phaseId",
											"value": "{{PHASE_ID}}"
										},
										{
											"key": "resourceRoleId",
											"value": "{{SUBMITTER_RESOURCE_ROLE_ID}}"
										},
										{
											"key": "phaseState",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get dependencies with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update dependency",
					"item": [
						{
							"name": "update dependency by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.phaseId).to.eq(iterationData.get('phaseId'))",
											"        pm.expect(response.resourceRoleId).to.eq(pm.environment.get('COPILOT_RESOURCE_ROLE_ID'))",
											"        pm.expect(response.phaseState).to.eq(iterationData.get('phaseState'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{phaseId}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": {{phaseState}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies",
										"{{DEPENDENCY_ID_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update dependency by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        pm.expect(response.phaseId).to.eq(iterationData.get('phaseId'))",
											"        pm.expect(response.resourceRoleId).to.eq(pm.environment.get('COPILOT_RESOURCE_ROLE_ID'))",
											"        pm.expect(response.phaseState).to.eq(iterationData.get('phaseState'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{phaseId}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": {{phaseState}}\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies",
										"{{DEPENDENCY_ID_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update not found dependency 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies/{{COPILOT_RESOURCE_ROLE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies",
										"{{COPILOT_RESOURCE_ROLE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update dependency with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies",
										"{{DEPENDENCY_ID_1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete dependency",
					"item": [
						{
							"name": "delete dependency with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies",
										"{{DEPENDENCY_ID_2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete dependency with admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies",
										"{{DEPENDENCY_ID_1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete dependency with m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies",
										"{{DEPENDENCY_ID_2}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}