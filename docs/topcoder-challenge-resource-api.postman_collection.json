{
	"variables": [],
	"info": {
		"name": "topcoder-challenge-resource-api",
		"_postman_id": "de2a0476-0ad4-d78a-f9c2-8db33ee75cc8",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Resource Roles",
			"description": "",
			"item": [
				{
					"name": "create resource role",
					"description": "",
					"item": [
						{
							"name": "create active read only access resource role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"COPILOT_RESOURCE_ROLE_ID\", pm.response.json().id);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"co-pilot\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create inactive full-access resource role by M2M",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"OBSERVER_RESOURCE_ROLE_ID\", pm.response.json().id);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Observer\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": true,\n\t\"isActive\": false,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create active, read and write access resource role by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"SUBMITTER_RESOURCE_ROLE_ID\", pm.response.json().id);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"submitter\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": true,\n\t\"isActive\": true,\n\t\"selfObtainable\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create reviewer resource role",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"REVIEWER_RESOURCE_ROLE_ID\", pm.response.json().id);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"reviewer\",\n\t\"fullReadAccess\": false,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource role with invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"invalid\": \"invalid\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource role with missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure-test\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource role no token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource role invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource role expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource role by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource role using invalid m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create duplicate resource role 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"SUBMITTER\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": true\n}"
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get resource roles",
					"description": "",
					"item": [
						{
							"name": "get all resource roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles",
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resource role by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?name=Reviewer",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "name",
											"value": "Reviewer"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get active resource roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?isActive=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get inactive resource roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?isActive=false",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "isActive",
											"value": "false"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resource roles with invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?isActive=invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "isActive",
											"value": "invalid"
										},
										{
											"key": "invalid",
											"value": "invalid",
											"disabled": true
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resource roles using expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?isActive=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resource roles without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?isActive=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resource roles using invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?isActive=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resource roles using invalid m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles?isActive=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles"
									],
									"query": [
										{
											"key": "isActive",
											"value": "true"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update resource role",
					"description": "",
					"item": [
						{
							"name": "failure - update resource role invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/test",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure-test\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role missing parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role using invalid m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role not-found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{CHALLENGE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"failure-test\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update resource role name duplication 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{m2m_all_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"SUBMITTER\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": false,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "update resource role using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"UPDATE-CO-PILOT\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": true,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "update resource role via admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"CO-PILOT\",\n\t\"fullReadAccess\": true,\n    \"fullWriteAccess\": true,\n\t\"isActive\": true,\n\t\"selfObtainable\": false\n}"
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Resource Role Phase Dependencies",
			"description": "",
			"item": [
				{
					"name": "create dependency",
					"description": "",
					"item": [
						{
							"name": "create dependency by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"DEPENDENCY_ID_1\", pm.response.json().id);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create dependency by M2M",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"DEPENDENCY_ID_2\", pm.response.json().id);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create dependency with not found phase id 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create dependency with conflict 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create dependency by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create dependency with expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create dependency without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create dependency with invalid body 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"abc\",\n\t\"resourceRoleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get dependencies",
					"description": "",
					"item": [
						{
							"name": "get all dependencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get matched dependencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies?phaseId={{PHASE_ID}}&resourceRoleId={{SUBMITTER_RESOURCE_ROLE_ID}}&phaseState=false",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									],
									"query": [
										{
											"key": "phaseId",
											"value": "{{PHASE_ID}}"
										},
										{
											"key": "resourceRoleId",
											"value": "{{SUBMITTER_RESOURCE_ROLE_ID}}"
										},
										{
											"key": "phaseState",
											"value": "false"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get dependencies with invalid query 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resource-roles/Phase-dependencies?phaseId=abc&resourceRoleId=123&phaseState=abc",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resource-roles",
										"Phase-dependencies"
									],
									"query": [
										{
											"key": "phaseId",
											"value": "abc"
										},
										{
											"key": "resourceRoleId",
											"value": "123"
										},
										{
											"key": "phaseState",
											"value": "abc"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get dependencies with forbidden M2M 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get dependencies with forbidden user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies",
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "update dependency",
					"description": "",
					"item": [
						{
							"name": "update dependency via admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": true\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "update dependency via m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update dependency with not found role id 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{DEPENDENCY_ID_2}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update not found dependency 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{COPILOT_RESOURCE_ROLE_ID}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update dependency with invalid body 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - update dependency via forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"phaseId\": \"{{PHASE_ID}}\",\n\t\"resourceRoleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\",\n\t\"phaseState\": false\n}"
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "delete dependency",
					"description": "",
					"item": [
						{
							"name": "delete dependency via admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_1}}",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "delete dependency via m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_2}}",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete not found dependency 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{SUBMITTER_RESOURCE_ROLE_ID}}",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete dependency via invalid id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/abc",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete dependency via forbidden m2m 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_2}}",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete dependency via forbidden user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resource-roles/Phase-dependencies/{{DEPENDENCY_ID_2}}",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Resources",
			"description": "",
			"item": [
				{
					"name": "create resource",
					"description": "",
					"item": [
						{
							"name": "create resource by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"HoHoSKY\",\n\t\"roleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create another resource for hohosky",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"HoHoSKY\",\n\t\"roleId\": \"{{REVIEWER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create resource by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"denis\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create resource using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create resource for challenge 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{TEST_CHALLENGE_ID1}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{REVIEWER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create resource for challenge 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{TEST_CHALLENGE_ID2}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{REVIEWER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource using inactive role 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource using unexisted role 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{CHALLENGE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource invalid challengeId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"invalid\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": true,\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource member doesn't exist 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"123abcx\",\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource using invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource using expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource with invalid user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource using invalid m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create resource for unexisted challenge 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_NOT_FOUND_ID}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create duplicate resource 409",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"HoHoSKY\",\n\t\"roleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure create resource challengeId missing 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"memberHandle\": \"HoHoSKY\",\n\t\"roleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "create self obtainable resource resource by user itself",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user3_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"lars2520\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - create self obtainable resource resource for other user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user3_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"thomaskranitsas\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "get resources",
					"description": "",
					"item": [
						{
							"name": "get resources by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources by admin with member ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}&memberId={{MEMBER_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "memberId",
											"value": "{{MEMBER_ID}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"description": ""
									}
								],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources by admin with member handle",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}&memberHandle={{MEMBER_HANDLE}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "memberHandle",
											"value": "{{MEMBER_HANDLE}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"description": ""
									}
								],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources by user has full-access permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources by user has full-access permission with member ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}&memberId={{MEMBER_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "memberId",
											"value": "{{MEMBER_ID}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user2_token}}",
										"description": ""
									}
								],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources by user has full-access permission with member handle",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}&memberHandle={{MEMBER_HANDLE}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "memberHandle",
											"value": "{{MEMBER_HANDLE}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user2_token}}",
										"description": ""
									}
								],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources using m2m token with member ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}&memberId={{MEMBER_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "memberId",
											"value": "{{MEMBER_ID}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Authorization",
										"value": "Bearer {{m2m_read_token}}",
										"description": ""
									}
								],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get resources using m2m token with member handle",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}&memberHandle={{MEMBER_HANDLE}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}",
											"equals": true,
											"description": ""
										},
										{
											"key": "memberHandle",
											"value": "{{MEMBER_HANDLE}}",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									},
									{
										"key": "Authorization",
										"value": "Bearer {{m2m_read_token}}",
										"description": ""
									}
								],
								"body": {},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resources invalid challenge id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId=invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "invalid"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resources using invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resources using expire token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resources by user without full-access permission 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resources using invalid m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resources challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources?challengeId={{CHALLENGE_NOT_FOUND_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "challengeId",
											"value": "{{CHALLENGE_NOT_FOUND_ID}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get resources challengeId is missing 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "list challenge by member",
					"description": "",
					"item": [
						{
							"name": "get challenges hohosky can access",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources/16096823/challenges",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{user1_token}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{user2_token}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get challenges ghostar can access",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources/151743/challenges",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{m2m_read_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "get challenges ghostar can access with filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources/151743/challenges?resourceRoleId={{REVIEWER_RESOURCE_ROLE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"151743",
										"challenges"
									],
									"query": [
										{
											"key": "resourceRoleId",
											"value": "{{REVIEWER_RESOURCE_ROLE_ID}}"
										},
										{
											"key": "resourceRoleId",
											"value": "{{SUBMITTER_RESOURCE_ROLE_ID}}",
											"disabled": true
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get challenges for a non existed user 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources/111111111/challenges",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get challenges for user with invalid resourceRoleId filter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources/151743/challenges?resourceRoleId={{TEST_CHALLENGE_ID1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"151743",
										"challenges"
									],
									"query": [
										{
											"key": "resourceRoleId",
											"value": "{{TEST_CHALLENGE_ID1}}"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure get challenges for user without token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources/16096823/challenges",
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure get challenges for user using forbidden m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources/16096823/challenges",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get challenges memberId incorrect 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources/invalid/challenges",
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - get challenges resourceRoleId incorrect 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": {
									"raw": "{{URL}}/resources/16096823/challenges?resourceRoleId=111111",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resources",
										"16096823",
										"challenges"
									],
									"query": [
										{
											"key": "resourceRoleId",
											"value": "111111"
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "delete resource",
					"description": "",
					"item": [
						{
							"name": "failure - delete resource that user doesn't have 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{m2m_modify_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"hohoSKY\",\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource invalid challenge id 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"invalid\",\n\t\"memberHandle\": \"hohoSKY\",\n\t\"roleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource using unexisted role 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{CHALLENGE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource member doesn't exist 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"123abcx\",\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource invalid parameter 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": true,\n\t\"roleId\": \"{{OBSERVER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource using invalid token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource using expired token 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{expire_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource with invalid user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user1_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource using invalid m2m token 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_read_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"tonyj\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource challenge not found 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_modify_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_NOT_FOUND_ID}}\",\n\t\"memberHandle\": \"hohoSKY\",\n\t\"roleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "delete resource using m2m token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_all_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"ghostar\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "delete resource by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"denis\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "delete resource by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"HoHoSKY\",\n\t\"roleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "failure - delete resource missing challengeId 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"memberHandle\": \"HoHoSKY\",\n\t\"roleId\": \"{{COPILOT_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "delete other's self obtainable resource by user 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user2_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"lars2520\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "delete obtainable resource by user itself",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"url": "{{URL}}/resources",
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user3_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"challengeId\": \"{{CHALLENGE_ID}}\",\n\t\"memberHandle\": \"lars2520\",\n\t\"roleId\": \"{{SUBMITTER_RESOURCE_ROLE_ID}}\"\n}"
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "health check",
			"request": {
				"url": "{{URL}}/resources/health",
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		}
	]
}